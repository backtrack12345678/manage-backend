generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  SPV
  MANDOR
}

enum WoodUnit {
  KG
  BATANG
  KENDARAAN
}

enum TransactionStatus {
  PENDING
  DITERIMA
  DITOLAK
}

enum TransactionType {
  BELUM_DIBAYAR
  LUNAS
  UTANG
}

model User {
  id       String   @id @db.VarChar(150)
  username String   @unique @db.VarChar(20)
  password String   @db.VarChar(100)
  name     String   @db.VarChar(100)
  role     UserRole @default(ADMIN)
  isActive Boolean  @default(true) @map("is_active")

  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime?              @updatedAt @map("updated_at")
  woodPriceLogs        WoodPriceLog[]
  refreshToken         Refresh_Token?
  transactions         Transaction[]
  transactionValidated TransactionValidator[]

  @@map("user")
}

model Garden {
  id                  Int      @id @default(autoincrement())
  name                String   @db.VarChar(100)
  woodPiecesQtyTarget Int?     @map("wood_pieces_qty_target")
  woodPiecesQtyActual Int?     @map("wood_pieces_qty_actual")
  woodPiecesCostPrice Decimal? @map("wood_pieces_cost_price") @db.Decimal(18, 2)
  isActive            Boolean  @default(true) @map("is_active")

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  transactions Transaction[]

  @@map("garden")
}

model Wood {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(100)
  price    Decimal  @db.Decimal(18, 2)
  unit     WoodUnit
  isActive Boolean  @default(true) @map("is_active")

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime?      @updatedAt @map("updated_at")
  priceLogs    WoodPriceLog[]
  transactions Transaction[]

  @@map("wood")
}

model WoodPriceLog {
  id          Int      @id @default(autoincrement())
  woodId      Int      @map("wood_id")
  wood        Wood     @relation(fields: [woodId], references: [id])
  oldName     String   @db.VarChar(100)
  oldUnit     WoodUnit
  oldPrice    Decimal  @map("old_price") @db.Decimal(18, 2)
  newPrice    Decimal  @map("new_price") @db.Decimal(18, 2)
  updatedById String   @map("updated_by_id") @db.VarChar(150)
  updatedBy   User     @relation(fields: [updatedById], references: [id])

  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("wood_price_log")
}

model Vehicle {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(100)
  isActive Boolean @default(true) @map("is_active")

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  transactions Transaction[]

  @@map("vehicle")
}

model Customer {
  id       Int     @id @default(autoincrement())
  name     String  @db.VarChar(100)
  isActive Boolean @default(true) @map("is_active")

  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime?     @updatedAt @map("updated_at")
  transactions Transaction[]

  @@map("customer")
}

model Transaction {
  id String @id @db.VarChar(150)

  userId    String @map("user_id") @db.VarChar(150)
  createdBy User   @relation(fields: [userId], references: [id])

  gardenId   Int    @map("garden_id")
  garden     Garden @relation(fields: [gardenId], references: [id])
  gardenName String @map("garden_name") @db.VarChar(100)

  customerId   Int      @map("customer_id")
  customer     Customer @relation(fields: [customerId], references: [id])
  customerName String   @map("customer_name") @db.VarChar(100)

  vehicleId     Int     @map("vehicle_id")
  vehicle       Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleName   String  @map("vehicle_name") @db.VarChar(100)
  vehicleNumber String  @map("vehicle_number") @db.VarChar(20)

  woodId        Int      @map("wood_id")
  wood          Wood     @relation(fields: [woodId], references: [id])
  woodName      String   @map("wood_name") @db.VarChar(100)
  woodPrice     Decimal  @map("wood_price") @db.Decimal(18, 2)
  woodUnit      WoodUnit
  woodPiecesQty Int      @map("wood_pieces_qty")
  woodUnitsqty  Int?     @map("wood_units_qty")

  totalPrice Decimal? @map("total_price") @db.Decimal(18, 2)
  totalPaid  Decimal? @map("total_paid") @db.Decimal(18, 2)
  totalCost  Decimal? @map("total_cost") @db.Decimal(18, 2)

  status TransactionStatus @default(PENDING)
  type   TransactionType?

  namaFile String @default("default_transaction.jpg") @map("nama_file") @db.VarChar(150)
  path     String @db.VarChar(150)

  validatedBy TransactionValidator?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("transaction")
}

model TransactionValidator {
  id           Int         @id @default(autoincrement())
  tranactionId String      @unique @map("transaction_id") @db.VarChar(150)
  transaction  Transaction @relation(fields: [tranactionId], references: [id], onDelete: Cascade)

  userId String @map("user_id") @db.VarChar(150)
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("transaction_validator")
}

model Refresh_Token {
  id                Int     @id @default(autoincrement())
  userId            String  @unique @map("user_id") @db.VarChar(150)
  user              User    @relation(fields: [userId], references: [id])
  refreshToken      String  @map("refresh_token") @db.VarChar(250)
  notificationToken String? @map("notification_token") @db.VarChar(250)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("refresh_token")
}
